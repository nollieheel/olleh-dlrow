version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.2.1
  jq: circleci/jq@2.2.0

commands:
  setup-awscli:
    description: "Setup awscli and jq"
    steps:
      - aws-cli/setup
      - jq/install:
          version: jq-1.6
  get-latest-image-tag:
    description: "Get the number tag of the image currently marked as latest"
    parameters:
      repo-name:
        type: string
    steps:
      - run:
          name: "Get latest number tag of image"
          command: |
            tag=$(aws ecr describe-images --repository-name <<parameters.repo-name>> --image-ids imageTag=latest | jq -r '.imageDetails[0].imageTags | map(select(. != "latest"))[0]')

            echo Latest image tag is ${tag}
            echo "export LATEST_IMAGE_TAG=${tag}" >> $BASH_ENV
  increment-latest-tag:
    description: "Increment the LATEST_IMAGE_TAG var in BASH_ENV"
    steps:
      - run:
          name: "Increment latest image tag"
          command: |
            tag=$((LATEST_IMAGE_TAG + 1))
            echo New image tag will be ${tag}
            echo "export NEW_IMAGE_TAG=${tag}" >> $BASH_ENV
  get-deploy-variables:
    description: "Obtain deploy variables"
    steps:
      - run:
          name: "Get deploy variables"
          command: |
            tgroup_old=$(aws elbv2 describe-rules --rule-arns ${AWS_RULE_ARN_PRELIVE} | jq -r '.Rules[0].Actions[0].TargetGroupArn')

            if [[ "$tgroup_old" == "$AWS_TGROUP_ARN_1" ]]; then
              echo "export DEPLOY_SERVICE=${AWS_ECS_SERVICE_1}" >> $BASH_ENV
              echo "export LIVE_TGROUP=${AWS_TGROUP_ARN_1}" >> $BASH_ENV
              echo "export OLD_TGROUP=${AWS_TGROUP_ARN_2}" >> $BASH_ENV
              tgroup_old_num=1
            elif [[ "$tgroup_old" == "$AWS_TGROUP_ARN_2" ]]; then
              echo "export DEPLOY_SERVICE=${AWS_ECS_SERVICE_2}" >> $BASH_ENV
              echo "export LIVE_TGROUP=${AWS_TGROUP_ARN_2}" >> $BASH_ENV
              echo "export OLD_TGROUP=${AWS_TGROUP_ARN_1}" >> $BASH_ENV
              tgroup_old_num=2
            else
              >&2 echo "Pre-live ALB listener rule is currently not associated with either target groups"
              exit 2
            fi

            echo Deploy to service designation ${tgroup_old_num}

jobs:
  build-and-push:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-latest-image-tag:
          repo-name: $AWS_ECR_REPO_NAME
      - increment-latest-tag
#      - aws-ecr/build-and-push-image:
#          setup-remote-docker: true
#          remote-docker-layer-caching: true
#          repo: $AWS_ECR_REPO_NAME
#          tag: ${NEW_IMAGE_TAG},latest
  deploy-service:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-latest-image-tag:
          repo-name: $AWS_ECR_REPO_NAME
      - get-deploy-variables
      - aws-ecs/update-service:
          cluster-name: $AWS_ECS_CLUSTER_NAME
          service-name: $DEPLOY_SERVICE
          family: $AWS_TASK_DEF_FAMILY
          container-image-name-updates: 'container=${AWS_TASK_DEF_CONTAINER},tag=${LATEST_IMAGE_TAG}'
          task-definition-tags: 'key=CreatedBy,value=CircleCI'
          verify-revision-is-deployed: true
  toggle-target-groups:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-deploy-variables
      - run:
          name: "Toggle target group associations"
          command: |
            aws elbv2 modify-rule --rule-arn ${AWS_RULE_ARN_PRELIVE} --actions Type=forward,TargetGroupArn=${AWS_TGROUP_ARN_BRIDGE}
            aws elbv2 modify-rule --rule-arn ${AWS_RULE_ARN_LIVE} --actions Type=forward,TargetGroupArn=${LIVE_TGROUP}
            aws elbv2 modify-rule --rule-arn ${AWS_RULE_ARN_PRELIVE} --actions Type=forward,TargetGroupArn=${OLD_TGROUP}
  test-job:
    docker:
      - image: cimg/python:3.9
    steps:
      - run: echo nothing

workflows:
  build_push_deploy:
    jobs:
#      - test-job:
#          filters:
#            branches:
#              only: kotlin-docker
      - build-and-push:
          filters:
            branches:
              only: kotlin-docker
#      - deploy-service:
#          requires:
#            - build-and-push
#          filters:
#            branches:
#              only: kotlin-docker
#      - switch-to-live-now:
#          type: approval
#          requires:
#            - deploy-service
#      - toggle-target-groups:
#          requires:
#            - switch-to-live-now
#          filters:
#            branches:
#              only: kotlin-docker
