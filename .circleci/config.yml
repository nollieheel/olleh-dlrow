version: 2.1

parameters:
  prod-branch:
    type: string
    default: "react-static"
  qa-branch:
    type: string
    default: "react-static"
  live-dist-config-file:
    type: string
    default: "circleci_live_dist_config.json"
  prelive-dist-config-file:
    type: string
    default: "circleci_prelive_dist_config.json"
  timestamp-file:
    type: string
    default: "circleci_timestamp"

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  jq: circleci/jq@2.2.0

commands:

  setup-awscli:
    description: "Setup awscli and jq"
    steps:
      - aws-cli/setup
      - jq/install:
          version: jq-1.6

  get-dist-config:
    description: "Request distribution config from Cloudfront"
    parameters:
      dist-id:
        type: string
      filename:
        type: string
    steps:
      - run:
          name: "Request distribution config from Cloudfront"
          command: |
            aws cloudfront get-distribution-config --id <<parameters.dist-id>> > <<parameters.filename>>

jobs:

  generate-build:
    docker:
      - image: cimg/node:14.16.1
    steps:
      - run: node --version && yarn --version
      - checkout
      - run:
          name: "Create timestamp file"
          command: date --utc +%Y%m%d_%H%M%S > <<pipeline.parameters.timestamp-file>>
#      - restore_cache:
#          keys:
#            - node-modules-v1_{{ checksum "yarn.lock" }}
#      - run: yarn install
#      - save_cache:
#          key: node-modules-v1_{{ checksum "yarn.lock" }}
#          paths:
#            - node_modules
#      - run: yarn build
#      - run:
#          name: "Create build tarball"
#          command: tar czf build.tar.gz build
      - persist_to_workspace:
          root: .
          paths:
            - <<pipeline.parameters.timestamp-file>>
#            - build
#            - build.tar.gz

  get-dist-configs:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-dist-config:
          dist-id: $AWS_CF_PRELIVE
          filename: <<pipeline.parameters.prelive-dist-config-file>>
      - get-dist-config:
          dist-id: $AWS_CF_LIVE
          filename: <<pipeline.parameters.live-dist-config-file>>
      - persist_to_workspace:
          root: .
          paths:
            - <<pipeline.parameters.live-dist-config-file>>
            - <<pipeline.parameters.prelive-dist-config-file>>

  upload-build-archive:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - attach_workspace:
          at: ./
      - run:
          name: "Upload the build tarball into bucket"
          command: |
            fname=$(cat <<pipeline.parameters.timestamp-file>>).tar.gz
            aws s3 cp build.tar.gz s3://${AWS_S3_ROOT_BUCKET}/frontend/tarballs/${fname}

  upload-to-prelive-bucket:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - attach_workspace:
          at: ./
      - run:
          name: "Find prelive bucket path"
          command: |
            prelive_origin_path=$(jq -r --arg originid $AWS_CF_ORIGIN_ID '.DistributionConfig.Origins.Items | map(select(.Id == $originid))[0].OriginPath' <<pipeline.parameters.prelive-dist-config-file>>)
            echo $prelive_origin_path



  another-job:
    docker:
      - image: cimg/node:14.16.1
    steps:
      - attach_workspace:
          at: ./
      - run: cat <<pipeline.parameters.timestamp-file>>
      - run: cat <<pipeline.parameters.live-dist-config-file>>
      - run: cat <<pipeline.parameters.prelive-dist-config-file>>

workflows:

#  qa_build_push_deploy:
#    jobs:
#      - build-and-push:
#          repo-name: $AWS_ECR_QA_REPO_NAME
#          filters:
#            branches:
#              only: <<pipeline.parameters.qa-branch>>
#      - simple-deploy-service:
#          repo-name: $AWS_ECR_QA_REPO_NAME
#          service-name: $AWS_ECS_QA_SERVICE
#          container-name: $AWS_TASK_DEF_QA_CONTAINER
#          family: $AWS_TASK_DEF_QA_FAMILY
#          requires:
#            - build-and-push
#          filters:
#            branches:
#              only: <<pipeline.parameters.qa-branch>>

  do-the-thing:
    jobs:
      - generate-build:
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
      - get-dist-configs:
          requires:
            - generate-build
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
      - another-job:
          requires:
            - get-dist-configs
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
      - upload-to-prelive-bucket:
          requires:
            - another-job
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
#      - selective-deploy-service:
#          requires:
#            - build-and-push
#          filters:
#            branches:
#              only: <<pipeline.parameters.prod-branch>>
#      - switch-to-live-now:
#          type: approval
#          requires:
#            - selective-deploy-service
#      - toggle-target-groups:
#          requires:
#            - switch-to-live-now
#          filters:
#            branches:
#              only: <<pipeline.parameters.prod-branch>>
