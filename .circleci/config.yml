version: 2.1

parameters:
  prod-branch:
    type: string
    default: "kotlin-docker"
  qa-branch:
    type: string
    default: "kotlin-docker"

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.2.1
  jq: circleci/jq@2.2.0

commands:

  setup-awscli:
    description: "Setup awscli and jq"
    steps:
      - aws-cli/setup
      - jq/install:
          version: jq-1.6

  get-latest-image-tag:
    description: "Get number tag of image currently marked as 'latest' in repo"
    parameters:
      repo-name:
        type: string
    steps:
      - run:
          name: "Get latest number tag from repo"
          command: |
            res=$(aws ecr describe-images --repository-name <<parameters.repo-name>> --image-ids imageTag=latest || echo empty)
            if [[ "$res" == "empty" ]]; then
              tag=0
            else
              tag=$(echo $res | jq -r '.imageDetails[0].imageTags | map(select(. != "latest"))[0]')
            fi

            echo Latest image tag is ${tag}
            echo "export CONF_LATEST_IMG_TAG=${tag}" >> $BASH_ENV

  increment-latest-tag:
    description: "Increment CONF_LATEST_IMG_TAG env var"
    steps:
      - run:
          name: "Increment latest image tag"
          command: |
            tag=$((CONF_LATEST_IMG_TAG + 1))
            echo New image tag will be ${tag}
            echo "export CONF_NEW_IMG_TAG=${tag}" >> $BASH_ENV

  get-deploy-variables:
    description: "Generate variables for selective deploy"
    steps:
      - run:
          name: "Generate deploy variables"
          command: |
            tgroup_old=$(aws elbv2 describe-rules --rule-arns ${AWS_RULE_ARN_PRELIVE} | jq -r '.Rules[0].Actions[0].TargetGroupArn')

            if [[ "$tgroup_old" == "$AWS_TGROUP_ARN_1" ]]; then
              echo "export CONF_ECS_SERVICE=${AWS_ECS_SERVICE_1}" >> $BASH_ENV
              echo "export CONF_LIVE_TGROUP=${AWS_TGROUP_ARN_1}" >> $BASH_ENV
              echo "export CONF_PRELIVE_TGROUP=${AWS_TGROUP_ARN_2}" >> $BASH_ENV
              tgroup_old_num=1
            elif [[ "$tgroup_old" == "$AWS_TGROUP_ARN_2" ]]; then
              echo "export CONF_ECS_SERVICE=${AWS_ECS_SERVICE_2}" >> $BASH_ENV
              echo "export CONF_LIVE_TGROUP=${AWS_TGROUP_ARN_2}" >> $BASH_ENV
              echo "export CONF_PRELIVE_TGROUP=${AWS_TGROUP_ARN_1}" >> $BASH_ENV
              tgroup_old_num=2
            else
              >&2 echo "Pre-live ALB listener rule is currently not associated with either target groups"
              exit 2
            fi

            echo Deploy to service designation ${tgroup_old_num}

jobs:

  build-and-push:
    parameters:
      repo-name:
        type: string
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-latest-image-tag:
          repo-name: <<parameters.repo-name>>
      - increment-latest-tag
      - aws-ecr/build-and-push-image:
          setup-remote-docker: true
          remote-docker-layer-caching: true
          repo: <<parameters.repo-name>>
          tag: ${CONF_NEW_IMG_TAG},latest

  simple-deploy-service:
    parameters:
      repo-name:
        type: string
      service-name:
        type: string
      container-name:
        type: string
      family:
        type: string
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-latest-image-tag:
          repo-name: <<parameters.repo-name>>
      - aws-ecs/update-service:
          cluster-name: $AWS_ECS_CLUSTER_NAME
          service-name: <<parameters.service-name>>
          family: <<parameters.family>>
          container-image-name-updates: "container=<<parameters.container-name>>,tag=${CONF_LATEST_IMG_TAG}"
          container-env-var-updates: "container=<<parameters.container-name>>,name=APP_GIT_REFERENCE,value=${CIRCLE_SHA1}"
          task-definition-tags: 'key=CreatedBy,value=CircleCI'
          verify-revision-is-deployed: true

  selective-deploy-service:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-latest-image-tag:
          repo-name: $AWS_ECR_REPO_NAME
      - get-deploy-variables
      - aws-ecs/update-service:
          cluster-name: $AWS_ECS_CLUSTER_NAME
          service-name: $CONF_ECS_SERVICE
          family: $AWS_TASK_DEF_FAMILY
          container-image-name-updates: 'container=${AWS_TASK_DEF_CONTAINER},tag=${CONF_LATEST_IMG_TAG}'
          container-env-var-updates: "container=${AWS_TASK_DEF_CONTAINER},name=APP_GIT_REFERENCE,value=${CIRCLE_SHA1}"
          task-definition-tags: 'key=CreatedBy,value=CircleCI'
          verify-revision-is-deployed: true

  toggle-target-groups:
    docker:
      - image: cimg/python:3.9
    steps:
      - setup-awscli
      - get-deploy-variables
      - run:
          name: "Toggle target group associations"
          command: |
            aws elbv2 modify-rule --rule-arn ${AWS_RULE_ARN_PRELIVE} --actions Type=forward,TargetGroupArn=${AWS_TGROUP_ARN_BRIDGE}
            aws elbv2 modify-rule --rule-arn ${AWS_RULE_ARN_LIVE} --actions Type=forward,TargetGroupArn=${CONF_LIVE_TGROUP}
            aws elbv2 modify-rule --rule-arn ${AWS_RULE_ARN_PRELIVE} --actions Type=forward,TargetGroupArn=${CONF_PRELIVE_TGROUP}

workflows:

  qa_build_push_deploy:
    jobs:
      - build-and-push:
          repo-name: $AWS_ECR_QA_REPO_NAME
          filters:
            branches:
              only: <<pipeline.parameters.qa-branch>>
      - simple-deploy-service:
          repo-name: $AWS_ECR_QA_REPO_NAME
          service-name: $AWS_ECS_QA_SERVICE
          container-name: $AWS_TASK_DEF_QA_CONTAINER
          family: $AWS_TASK_DEF_QA_FAMILY
          requires:
            - build-and-push
          filters:
            branches:
              only: <<pipeline.parameters.qa-branch>>

  prod_build_push_deploy:
    jobs:
      - build-and-push:
          repo-name: $AWS_ECR_REPO_NAME
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
      - selective-deploy-service:
          requires:
            - build-and-push
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
      - switch-to-live-now:
          type: approval
          requires:
            - selective-deploy-service
      - toggle-target-groups:
          requires:
            - switch-to-live-now
          filters:
            branches:
              only: <<pipeline.parameters.prod-branch>>
