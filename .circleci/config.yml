version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.2.1
  jq: circleci/jq@2.2.0

commands:
  get-latest-image-tag:
    description: 'Get the number tag of the image currently marked as latest'
    steps:
      - aws-cli/setup
      - jq/install:
          version: jq-1.6
      - run: |
          tag=$(aws ecr describe-images --repository-name ${AWS_ECR_REPO_NAME} --image-ids imageTag=latest | jq -r '.imageDetails[0].imageTags | map(select(. != "latest"))[0]')
          echo Latest image tag is ${tag}
          echo "export LATEST_IMAGE_TAG=${tag}" >> $BASH_ENV

jobs:
  build-and-push:
    docker:
      - image: cimg/python:3.9
    steps:
      - get-latest-image-tag
      - run:
          name: "Increment latest image tag"
          command: |
            tag=$((LATEST_IMAGE_TAG + 1))
            echo New image tag will be ${tag}
            echo "export NEW_IMAGE_TAG=${tag}" >> $BASH_ENV
      - run: echo Build the image and tag it ${NEW_IMAGE_TAG}
#      - aws-ecr/build-and-push-image:
#          setup-remote-docker: true
#          remote-docker-layer-caching: true
#          repo: nes
#          tag: ${NEW_IMAGE_TAG},latest
  deploy-service:
    docker:
      - image: cimg/python:3.9
    steps:
      - get-latest-image-tag
      - run: echo Deploy the cluster with tag ${LATEST_IMAGE_TAG}
#      - aws-ecs/update-service:
#          cluster-name: ${AWS_ECS_CLUSTER_NAME}
#          service-name: ${AWS_ECS_SERVICE_NAME}
#          family: ${AWS_TASK_DEF_FAMILY}
#          container-image-name-updates: 'container=${AWS_TASK_DEF_CONTAINER},tag=${LATEST_IMAGE_TAG}'
#          task-definition-tags: 'key=CreatedBy,value=CircleCI'
#          verify-revision-is-deployed: true
  test-vars:
    docker:
      - image: cimg/python:3.9
    steps:
      - get-latest-image-tag
      - run: echo the lates tag is ${LATEST_IMAGE_TAG}

workflows:
  build_push_deploy:
    jobs:
      - test-vars:
          filters:
            branches:
              only: kotlin-docker
      - build-and-push:
          filters:
            branches:
              only: kotlin-docker
#      - wait:
#          type: approval
#          requires:
#            - build-and-push
#      - deploy-service:
#          requires:
#            - wait
#          filters:
#            branches:
#              only: kotlin-docker
